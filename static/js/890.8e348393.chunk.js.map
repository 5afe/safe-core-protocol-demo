{"version":3,"file":"static/js/890.8e348393.chunk.js","mappings":"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","sources":["../node_modules/@noble/hashes/src/_assert.ts","../node_modules/@noble/hashes/src/crypto.ts","../node_modules/@noble/hashes/src/utils.ts","../node_modules/@noble/hashes/src/_sha2.ts","../node_modules/@noble/hashes/src/sha256.ts","../node_modules/@noble/curves/src/abstract/utils.ts","../node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/@noble/curves/src/abstract/hash-to-curve.ts","../node_modules/@noble/hashes/src/hmac.ts","../node_modules/@noble/curves/src/_shortw_utils.ts","../node_modules/@noble/curves/src/secp256k1.ts"],"sourcesContent":["export function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nexport function bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nexport function bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new TypeError('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nexport function hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nexport function exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nexport function output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nconst assert = {\n  number,\n  bool,\n  bytes,\n  hash,\n  exists,\n  output,\n};\n\nexport default assert;\n","declare const globalThis: Record<string, any> | undefined;\nexport const crypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use `globalThis.crypto`, but node.js versions earlier than v19 don't\n// declare it in global scope. For node.js, package.json#exports field mapping\n// rewrites import from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef])) // 'deadbeef'\n */\nexport function bytesToHex(uint8a: Uint8Array): string {\n  // pre-caching improves the speed 6x\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Uint8Array expected');\n  let hex = '';\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += hexes[uint8a[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('deadbeef') // Uint8Array.from([0xde, 0xad, 0xbe, 0xef])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex');\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') {\n    throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n  }\n  return new TextEncoder().encode(str);\n}\n\nexport type Input = Uint8Array | string;\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!(data instanceof Uint8Array))\n    throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n  return data;\n}\n\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  if (!arrays.every((a) => a instanceof Uint8Array)) throw new Error('Uint8Array list expected');\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n  return result;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj: any) =>\n  Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n    throw new TypeError('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashConstructor: () => Hash<T>) {\n  const hashC = (message: Input): Uint8Array => hashConstructor().update(toBytes(message)).digest();\n  const tmp = hashConstructor();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashConstructor();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `globalThis.crypto` or node.js crypto module.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","import assert from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    assert.exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\nexport const sha224 = wrapConstructor(() => new SHA224());\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\n\n// We accept hex strings besides Uint8Array for simplicity\nexport type Hex = Uint8Array | string;\n// Very few implementations accept numbers, we do it to ease learning curve\nexport type PrivKey = Hex | bigint;\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n// Caching slows it down 2-3x\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  if (hex.length % 2) throw new Error('hex string is invalid: unpadded ' + hex.length);\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// Big Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport const numberToBytesBE = (n: bigint, len: number) =>\n  hexToBytes(n.toString(16).padStart(len * 2, '0'));\nexport const numberToBytesLE = (n: bigint, len: number) => numberToBytesBE(n, len).reverse();\n// Returns variable number bytes (minimal bigint encoding?)\nexport const numberToVarBytesBE = (n: bigint) => hexToBytes(numberToHexUnpadded(n));\n\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (u8a(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n// Copies several Uint8Arrays into one.\nexport function concatBytes(...arrs: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrs.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrs.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\nexport function equalBytes(b1: Uint8Array, b2: Uint8Array) {\n  // We don't care about timing attacks here\n  if (b1.length !== b2.length) return false;\n  for (let i = 0; i < b1.length; i++) if (b1[i] !== b2[i]) return false;\n  return true;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') {\n    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  }\n  return new TextEncoder().encode(str);\n}\n\n// Bit operations\n\n// Amount of bits inside bigint (Same as n.toString(2).length)\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n// Gets single bit at position. NOTE: first bit position is 0 (same as arrays)\n// Same as !!+Array.from(n.toString(2)).reverse()[pos]\nexport const bitGet = (n: bigint, pos: number) => (n >> BigInt(pos)) & _1n;\n// Sets single bit at position\nexport const bitSet = (n: bigint, pos: number, value: boolean) =>\n  n | ((value ? _1n : _0n) << BigInt(pos));\n// Return mask for N bits (Same as BigInt(`0b${Array(i).fill('1').join('')}`))\n// Not using ** operator with bigints for old engines.\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently exponentiate num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * powMod(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Eucledian GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n// Tonelli-Shanks algorithm\n// Paper 1: https://eprint.iacr.org/2012/685.pdf (page 12)\n// Paper 2: Square Roots from 1; 24, 51, 10 to Dan Shanks\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Currently completly inconsistent naming:\n// - readable: add, mul, sqr, sqrt, inv, div, pow, eq, sub\n// - unreadable mess: addition, multiply, square, squareRoot, inversion, divide, power, equals, subtract\n\n// Field is not always over prime, Fp2 for example has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n// 0 is non-invertible: non-batched version will throw on 0\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a galois field over prime. Non-primes are not supported for now.\n * Do not init in loop: slow. Very fragile: always run a benchmark on change.\n * Major performance gains:\n * a) non-normalized operations like mulN instead of mul\n * b) `Object.freeze`\n * c) Same object shape: never add or remove keys\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Fp ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * FIPS 186 B.4.1-compliant \"constant-time\" private key generation utility.\n * Can take (n+8) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being neglible.\n * Needs at least 40 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * @param hash hash output from SHA3 or a similar function\n * @returns valid private scalar\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | true;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>) {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(readonly px: T, readonly py: T, readonly pz: T) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      // Zero is valid point too!\n      if (this.is0()) {\n        if (CURVE.allowInfinityPoint) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): SignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => SignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(readonly r: bigint, readonly s: bigint, readonly recovery?: number) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number) {\n      return new Signature(this.r, this.s, recovery);\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size (nBitLength+64)\n     * as per FIPS 186 B.4.1 with modulo bias being neglible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const rand = CURVE.randomBytes(Fp.BYTES + 8);\n      const num = mod.hashToPrivateScalar(rand, CURVE_ORDER);\n      return ut.numberToBytesBE(num, CURVE.nByteLength);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e, Fp.BYTES)); // check for being of size BYTES\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): Signature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery); // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash (not message: you need to hash it by yourself).\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param opts `lowS, extraEntropy, prehash`\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): Signature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const drbg = ut.createHmacDrbg<Signature>(CURVE.hash.outputLen, CURVE.nByteLength, CURVE.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n// Implementation of the Shallue and van de Woestijne method for any Weierstrass curve\n// TODO: check if there is a way to merge this with uvRatio in Edwards && move to modular?\n// b = True and y = sqrt(u / v) if (u / v) is square in F, and\n// b = False and y = sqrt(Z * (u / v)) otherwise.\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  const c2 = (q - _1n) / _2n ** c1; // 2. c2 = (q - 1) / (2^c1)        # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n ** c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n ** (c1 - _1n); // 5. c5 = 2^(c1 - 1)              # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = _2n ** (i - _2n); // 18.    tv5 = i - 2;    19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n// From draft-irtf-cfrg-hash-to-curve-16\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport type { Group, GroupConstructor, AffinePoint } from './curve.js';\nimport { mod, IField } from './modular.js';\nimport { bytesToNumberBE, CHash, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n\n/**\n * * `DST` is a domain separation tag, defined in section 2.2.5\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\n * * `m` is extension degree (1 for prime fields)\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\n */\ntype UnicodeOrBytes = string | Uint8Array;\nexport type Opts = {\n  DST: UnicodeOrBytes;\n  p: bigint;\n  m: number;\n  k: number;\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n};\n\nfunction validateDST(dst: UnicodeOrBytes): Uint8Array {\n  if (dst instanceof Uint8Array) return dst;\n  if (typeof dst === 'string') return utf8ToBytes(dst);\n  throw new Error('DST must be Uint8Array or string');\n}\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value: number, length: number): Uint8Array {\n  if (value < 0 || value >= 1 << (8 * length)) {\n    throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n  }\n  const res = Array.from({ length }).fill(0) as number[];\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\n\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\n\nfunction isBytes(item: unknown): void {\n  if (!(item instanceof Uint8Array)) throw new Error('Uint8Array expected');\n}\nfunction isNum(item: unknown): void {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.4.1\nexport function expand_message_xmd(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  H: CHash\n): Uint8Array {\n  isBytes(msg);\n  isBytes(DST);\n  isNum(lenInBytes);\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (ell > 255) throw new Error('Invalid xmd length');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array<Uint8Array>(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n\nexport function expand_message_xof(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  k: number,\n  H: CHash\n): Uint8Array {\n  isBytes(msg);\n  isBytes(DST);\n  isNum(lenInBytes);\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil((2 * k) / 8);\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255)\n    throw new Error('expand_message_xof: invalid lenInBytes');\n  return (\n    H.create({ dkLen: lenInBytes })\n      .update(msg)\n      .update(i2osp(lenInBytes, 2))\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\n      .update(DST)\n      .update(i2osp(DST.length, 1))\n      .digest()\n  );\n}\n\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.3\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\n  validateObject(options, {\n    DST: 'string',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash',\n  });\n  const { p, k, m, hash, expand, DST: _DST } = options;\n  isBytes(msg);\n  isNum(count);\n  const DST = validateDST(_DST);\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\n\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: [T[], T[], T[], T[]]) {\n  // Make same order as in spec\n  const COEFF = map.map((i) => Array.from(i).reverse());\n  return (x: T, y: T) => {\n    const [xNum, xDen, yNum, yDen] = COEFF.map((val) =>\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\n    );\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return { x, y };\n  };\n}\n\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\n  toAffine(iz?: bigint): AffinePoint<T>;\n  clearCofactor(): H2CPoint<T>;\n  assertValidity(): void;\n}\n\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\n}\n\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\n\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\n// (changing DST is ok!)\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\n\nexport function createHasher<T>(\n  Point: H2CPointConstructor<T>,\n  mapToCurve: MapToCurve<T>,\n  def: Opts & { encodeDST?: UnicodeOrBytes }\n) {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options } as Opts);\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\n      const P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options } as Opts);\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n  };\n}\n","import assert from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assert.hash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new TypeError('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assert.exists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.bytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport * as htf from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const schnorr = {\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n};\n\nconst isoMap = htf.isogenyMap(\n  Fp,\n  [\n    // xNum\n    [\n      '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n      '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n      '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n      '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n      '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n      '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n      '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n      '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n      '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n      '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n      '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n      '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n      '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n      '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n      '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n  ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n);\nconst mapSWU = mapToCurveSimpleSWU(Fp, {\n  A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n  B: BigInt('1771'),\n  Z: Fp.create(BigInt('-11')),\n});\nexport const { hashToCurve, encodeToCurve } = htf.createHasher(\n  secp256k1.ProjectivePoint,\n  (scalars: bigint[]) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n  },\n  {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n  }\n);\n"],"names":["number","n","Number","isSafeInteger","Error","concat","bytes","b","Uint8Array","TypeError","_len","arguments","length","lengths","Array","_key","includes","assert","bool","hash","create","outputLen","blockLen","exists","instance","checkFinished","undefined","destroyed","finished","output","out","min","crypto","globalThis","createView","arr","DataView","buffer","byteOffset","byteLength","rotr","word","shift","Uint32Array","from","v","i","toString","padStart","toBytes","data","str","TextEncoder","encode","utf8ToBytes","concatBytes","arrays","every","a","reduce","result","pad","set","Hash","_classCallCheck","_createClass","key","value","this","_cloneInto","wrapConstructor","hashConstructor","hashC","message","update","digest","tmp","randomBytes","bytesLength","getRandomValues","SHA2","_Hash","_inherits","_super","_createSuper","padOffset","isLE","_this","call","pos","view","len","take","Math","subarray","process","dataView","roundClean","fill","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","get","digestInto","res","slice","destroy","to","_to","constructor","apply","_toConsumableArray","Maj","c","SHA256_K","IV","SHA256_W","SHA256","_SHA","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","s1","T1","T2","SHA224","_SHA2","_super2","_this2","sha256","_0n","_1n","_2n","u8a","hexes","bytesToHex","hex","numberToHexUnpadded","num","hexToNumber","hexToBytes","array","j","hexByte","byte","parseInt","isNaN","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","numberToBytesLE","numberToVarBytesBE","ensureBytes","title","expectedLength","e","arrs","r","sum","forEach","equalBytes","b1","b2","bitLen","bitGet","bitSet","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","k","reset","_len2","_key2","reseed","seed","gen","sl","push","pred","validatorFns","bigint","val","function","boolean","string","isArray","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","String","_i","_Object$entries","Object","entries","_Object$entries$_i","_slicedToArray","_i2","_Object$entries2","_Object$entries2$_i","_3n","_4n","_5n","_8n","mod","pow","power","modulo","pow2","x","invert","y","u","q","m","FpSqrt","P","p1div4","root","eql","sqr","c1","n2","mul","nv","sub","ONE","Q","S","Z","legendreC","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","FIELD_FIELDS","validateField","map","ORDER","MASK","BYTES","BITS","nLength","nBitLength","_nBitLength","nByteLength","ceil","validateBasic","curve","Gx","Gy","freeze","_objectSpread","p","b2n","ut","h2b","DER","Err","_Error","DERErr","_wrapNativeSuper","_parseInt","d","toSig","_DER$_parseInt","sBytes","_DER$_parseInt2","s","hexFromSig","sig","shl","rhl","rl","weierstrassPoints","opts","CURVE","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","fromBytes","endo","beta","splitScalar","validatePointOpts","point","isCompressed","toAffine","tail","weierstrassEquation","x2","x3","add","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","error","pointPrecomputes","Map","assertPrjPoint","other","Point","px","py","pz","windowSize","_WINDOW_SIZE","delete","is0","_this$toAffine","left","right","isOdd","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","negate","equals","wnaf","wNAFCached","comp","toInv","invertBatch","fromAffine","I","unsafeLadder","_endo$splitScalar","k1neg","k1","k2neg","k2","k1p","k2p","double","scalar","fake","_endo$splitScalar2","_this$wNAF","wNAF","f1p","f","_this$wNAF2","f2p","constTimeNegate","_this$wNAF3","normalizeZ","BASE","multiply","multiplyUnsafe","iz","z","inv","ax","ay","zz","cofactor","assertValidity","toRawBytes","_ref","points","privateKey","_bits","bits","condition","item","W","windows","elm","precomputeWindow","_opts","base","window","precomputes","_opts2","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","precomputesMap","transform","ProjectivePoint","weierstrass","curveDef","hmac","bits2int","bits2int_modN","lowS","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","_weierstrassPoints","cat","hasEvenY","head","y2","sqrt","numToNByteStr","isBiggerThanHalfOrder","slcNum","Signature","recovery","msgHash","rec","radj","prefix","R","fromHex","ir","u1","u2","multiplyAndAddUnsafe","hasHighS","toDERHex","toCompactHex","_DER$toSig","utils","isValidPrivateKey","randomPrivateKey","groupOrder","minLen","precompute","_setWindowSize","isProbPub","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","prehash","ent","extraEntropy","h1int","seedArgs","k2sig","kBytes","ik","normS","normalizeS","defaultVerOpts","getPublicKey","fromPrivateKey","getSharedSecret","privateA","publicB","sign","privKey","_prepSig","drbg","verify","signature","publicKey","_Point$BASE$multiplyA","sg","_sig","fromDER","derError","fromCompact","_sig2","is","os2ip","i2osp","strxor","isBytes","isNum","hash_to_field","msg","count","options","DST","expand","_DST","prb","dst","validateDST","log2p","L","len_in_bytes","lenInBytes","b_in_bytes","r_in_bytes","ell","DST_prime","Z_pad","l_i_b_str","b_0","args","expand_message_xmd","dkLen","expand_message_xof","elm_offset","tv","HMAC","iHash","oHash","buf","getPrototypeOf","getHash","msgs","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b6","b9","b11","b22","b44","b88","b176","b220","b223","redef","_nLength","sqrtP","lhs","rhs","FpPow","div","sqrN","addN","subN","mulN","lst","nums","lastMultiplied","acc","inverted","reduceRight","FpInvertBatch","cmov","Field","secp256k1","defHash","createCurve","a1","a2","POW_2_128","c2","fe","TAGGED_HASH_PREFIXES","taggedHash","tag","tagP","tagH","charCodeAt","messages","pointToBytes","numTo32b","modP","GmulAdd","schnorrGetExtPubKey","priv","d_","lift_x","xx","challenge","schnorrVerify","pub","schnorr","auxRand","_schnorrGetExtPubKey","t","rand","k_","_schnorrGetExtPubKey2","rx","isoMap","COEFF","_COEFF$map","_COEFF$map2","xNum","xDen","yNum","yDen","htf","mapSWU","sqrtRatio","o","c3","c4","c5","c6","c7","tv1","tv2","tv3","tv5","tv4","isQR","tvv5","e1","y1","SWUFpSqrtRatio","tv6","_sqrtRatio","mapToCurveSimpleSWU","_htf$createHasher","mapToCurve","def","hashToCurve","u0","encodeToCurve","encodeDST","scalars","_mapSWU"],"sourceRoot":""}